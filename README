nivdror1, ido.shachar
niv dror (305498198), Ido Shachar (311248355)
EX: 3

FILES:
StringContainers.cpp
StringContainers.h
IntegerContainers.cpp
StringContainers.h
Comparators.h
Comparators.cpp
MapReduceDerived.cpp
MapReduceDerived.h
Search.cpp
MapReduceFramework.cpp
README
Makefile

REMARKS:
These are some remarks that
I want the graders to know
about this submission.

ANSWERS:

1) let numberOfMappingThreads be a global variable that initialize to N
   each ExecMap reduces the count by one at the of the thread run.

   the conditional variable and the mutex are global variables.

shuffle:
 mapStillRunning=true
 while (mapStillRunning) {

    lock(shuffleMutex)
    int cvTime= pthread_cond_timedwait(&cv,&shuffleMutex)
    unlock(shuffleMutex)

    // if there no more execMap threads running
    if(numberOfMappingThreads==0&& cvTime==ETIMEDOUT){
        mapStillRunning = false;
    }else if (cvTime!=ETIMEDOUT && cvTime!=0){
        exit(1)
    }
    go through the ExecMap containers and shuffled them
}

Emit2:

  //get the thread id
	pthread_t currentThreadId = pthread_self();
    //search for the same thread id
	go through the pthreadToContainer and search for the thread id

    lock the correct mutex append the pair to thew container and then unlock it

    lock(shuffleMutex)
    pthread_cond_signal(&cv,&shuffleMutex)
    unlock(shuffleMutex)


explanation on pthread_cond_timedwait:

On the extreme scenario on which no ExecMap thread is calling the function Emit2
we have produce an algorithm that will wake the shuffle thread on after a specific time.
And therefore the shuffle won't wait forever. However if we have used pthread_cond_wait
there is no guarantee that the shuffle will finish his function.

2) assuming that our computer doesn't have hyperThreading( which means there is no virtual core,
   so each core runs one process at a time). and assuming that our computer has 8 cores.
   from a formula we have seen in recitation :(ceiling(blocked time/service time) +1)* number of cores.
   therefore multiThreadLevel will be (ceiling(blocked time/service time) +1)* 8 which will maximize the
   utilization of the cpu.

3)
Nira: a single thread and a single process
Utilizing multi-cores: no use (use only one process)
Sophisticated scheduler: no need
Communication time: no need
Progress: no meaning (use only one thread)
Overall speed: slow

Moti: Posix's library
Utilizing multi-cores: use
Sophisticated scheduler: the library isn't aware to internal data
Communication time: medium
Progress: guaranteed
Overall speed: fast

Danny: user level thread
Utilizing multi-cores: no use
Sophisticated scheduler: use
Communication time: fast
Progress: guaranteed
Overall speed: medium

Galit: multi-processes
Utilizing multi-cores: use
Sophisticated scheduler: each process doesn't aware of the other so you cannot use sophisticated scheduler
Communication time: slow
Progress: guaranteed
Overall speed: fast

4) When a parent process perform a fork operation he duplicates the process
   so from now on the child process differ from the parent.

   each user level thread or kernel level thread  that was created
   owns a stack and share the global variables
   and the heap with the parent thread.


5) A deadlock - a situation in which two or more processes are unable to proceed because
 each one is waiting for one the others to unlock the resource and let it gain access.


   A livelock - a situation in which two or more processes are unable to proceed because
   each one will try to respond to the other continuously without progression possibility.

   example for deadlock  -
   let there be two threads called t1,t2, and two mutexes called m1,m2
   t1 lock the m1 while t2 lock m2 and then each thread tries get a lock on the other mutex.

   example for livelock - let there be two thread t1, t2 and two boolean variables b1,b2 initialize to true
   the process goes as follows while each thread run a single operation at a run :

   t1:
        while(b2){
            b1=false
            b1=true
        }
        b1=false

   t2:
        while(b1){
            b2=false
            b2=true
        }
        b2=false